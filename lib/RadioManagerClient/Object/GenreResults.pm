=begin comment

Pluxbox Radiomanager Client

Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com

OpenAPI spec version: 2.0
Contact: support@pluxbox.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package RadioManagerClient::Object::GenreResults;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

Pluxbox Radiomanager Client

Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com

OpenAPI spec version: 2.0
Contact: support@pluxbox.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "RadioManagerClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'GenreResults',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'current_page' => {
    	datatype => 'int',
    	base_name => 'current_page',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'from' => {
    	datatype => 'int',
    	base_name => 'from',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'last_page' => {
    	datatype => 'int',
    	base_name => 'last_page',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'next_page_url' => {
    	datatype => 'string',
    	base_name => 'next_page_url',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'path' => {
    	datatype => 'string',
    	base_name => 'path',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'per_page' => {
    	datatype => 'int',
    	base_name => 'per_page',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'prev_page_url' => {
    	datatype => 'string',
    	base_name => 'prev_page_url',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'to' => {
    	datatype => 'int',
    	base_name => 'to',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'total' => {
    	datatype => 'int',
    	base_name => 'total',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'results' => {
    	datatype => 'ARRAY[GenreResult]',
    	base_name => 'results',
    	description => '',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'current_page' => 'int',
    'from' => 'int',
    'last_page' => 'int',
    'next_page_url' => 'string',
    'path' => 'string',
    'per_page' => 'int',
    'prev_page_url' => 'string',
    'to' => 'int',
    'total' => 'int',
    'results' => 'ARRAY[GenreResult]'
} );

__PACKAGE__->attribute_map( {
    'current_page' => 'current_page',
    'from' => 'from',
    'last_page' => 'last_page',
    'next_page_url' => 'next_page_url',
    'path' => 'path',
    'per_page' => 'per_page',
    'prev_page_url' => 'prev_page_url',
    'to' => 'to',
    'total' => 'total',
    'results' => 'results'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
